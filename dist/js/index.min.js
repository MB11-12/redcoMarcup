"use strict";var initializeSlider=function(){new Swiper(".swiper-container",{loop:!0,speed:1e3,grabCursor:!0,watchSlidesProgress:!0,mousewheelControl:!0,keyboardControl:!0,fadeEffect:{crossFade:!0},autoplay:{delay:5e3}})};initializeSlider(),console.log("work");var tbilisi=document.getElementById("tbilisi"),mapInfoMziuri=document.getElementById("mziuri");tbilisi.addEventListener("mouseover",function(e){mapInfoMziuri.classList.toggle("active")});var mySwiper=new Swiper(".reviews__list",{loop:!0,speed:1e3,grabCursor:!0,watchSlidesProgress:!0,mousewheelControl:!0,keyboardControl:!0,fadeEffect:{crossFade:!0},autoplay:{delay:8e3},pagination:{el:".reviews__list_pagination",type:"bullets",clickable:!0},navigation:{nextEl:".reviews__list_btnNext",prevEl:".reviews__list_btnPrev"}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
